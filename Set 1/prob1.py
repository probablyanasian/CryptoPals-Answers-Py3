def hextobin(hexinput):
    hexinput = str(hexinput)
    output = ''
    hexbin = (('0','0000'),('1','0001'),('2','0010'),('3','0011'),('4','0100'),('5','0101'),('6','0110'),('7','0111'),('8','1000'),('9','1001'),('a','1010'),('b','1011'),('c','1100'),('d','1101'),('e','1110'),('f','1111'))
    for hexa in hexinput:
        try:
            hexa = str.lower(hexa)
        except TypeError:
            pass
        output = output + str([key[1] for key in hexbin if key[0] == hexa][0])
    return(output)

def bintohex(bininput):
    bininput = str(bininput)
    output = ''
    hexbin = (('0','0000'),('1','0001'),('2','0010'),('3','0011'),('4','0100'),('5','0101'),('6','0110'),('7','0111'),('8','1000'),('9','1001'),('a','1010'),('b','1011'),('c','1100'),('d','1101'),('e','1110'),('f','1111'))
    split = [bininput[i:i+4] for i in range(0, len(bininput), 4)]
    for fourbin in split:
        output = output + str([key[0] for key in hexbin if key[1] == fourbin][0])
    return(output)

def b64tobin(b64input):
    b64input = str(b64input)
    output = ''
    b64bin = (('A','000000'),('B','000001'),('C','000010'),('D','000011'),('E','000100'),('F','000101'),('G','000110'),('H','000111'),('I','001000'),('J','001001'),('K','001010'),('L','001011'),('M','001100'),('N','001101'),('O','001110'),('P','001111'),('Q','010000'),('R','010001'),('S','010010'),('T','010011'),('U','010100'),('V','010101'),('W','010110'),('X','010111'),('Y','011000'),('Z','011001'),('a','011010'),('b','011011'),('c','011100'),('d','011101'),('e','011110'),('f','011111'),('g','100000'),('h','100001'),('i','100010'),('j','100011'),('k','100100'),('l','100101'),('m','100110'),('n','100111'),('o','101000'),('p','101001'),('q','101010'),('r','101011'),('s','101100'),('t','101101'),('u','101110'),('v','101111'),('w','110000'),('x','110001'),('y','110010'),('z','110011'),('0','110100'),('1','110101'),('2','110110'),('3','110111'),('4','111000'),('5','111001'),('6','111010'),('7','111011'),('8','111100'),('9','111101'),('+','111110'),('/','111111'))
    for b64char in b64input:
        output = output + str([key[1] for key in b64bin if key[0] == b64char][0])
    return(output)

def bintob64(bininput):
    bininput = str(bininput)
    output = ''
    b64bin = (('A','000000'),('B','000001'),('C','000010'),('D','000011'),('E','000100'),('F','000101'),('G','000110'),('H','000111'),('I','001000'),('J','001001'),('K','001010'),('L','001011'),('M','001100'),('N','001101'),('O','001110'),('P','001111'),('Q','010000'),('R','010001'),('S','010010'),('T','010011'),('U','010100'),('V','010101'),('W','010110'),('X','010111'),('Y','011000'),('Z','011001'),('a','011010'),('b','011011'),('c','011100'),('d','011101'),('e','011110'),('f','011111'),('g','100000'),('h','100001'),('i','100010'),('j','100011'),('k','100100'),('l','100101'),('m','100110'),('n','100111'),('o','101000'),('p','101001'),('q','101010'),('r','101011'),('s','101100'),('t','101101'),('u','101110'),('v','101111'),('w','110000'),('x','110001'),('y','110010'),('z','110011'),('0','110100'),('1','110101'),('2','110110'),('3','110111'),('4','111000'),('5','111001'),('6','111010'),('7','111011'),('8','111100'),('9','111101'),('+','111110'),('/','111111'))
    split = [bininput[i:i+6] for i in range(0, len(bininput), 6)]
    for sixbin in split:
        output = output + str([key[0] for key in b64bin if key[1] == sixbin][0])
    output = output + '='*(len(output)%4)
    return(output)

inputa = ''
print(bintob64(hextobin(inputa)))

#Could also just be:
#import codecs
#hexa = 'deadbeef'
#b64 = codecs.encode(codecs.decode(hexa, 'hex'), 'base64').decode() #last .decode() to sanitize output
#print(b64)